//
//  MessagesViewController.swift
//  u_gud_bro_ext
//
//  Created by Raphael Cabral on 8/7/17.
//  Copyright Â© 2017 Raphael Cabral. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController, MessageDetailsViewControllerDelegate, AddMessageViewControllerDelegate {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    func addMessageViewControllerDidSubmit(image: UIImage, caption: String){
        let components = NSURLComponents()
        
        let layout = MSMessageTemplateLayout()
        layout.image = image
        layout.caption = caption
        let message = MSMessage()
        message.url = components.url
        message.layout = layout
        activeConversation?.insert(message, completionHandler: nil)
        
        
    }
    
    func messageDetailsViewControllerDidSubmit(image: UIImage, caption: String){
        let components = NSURLComponents()
        
        let layout = MSMessageTemplateLayout()
        layout.image = image
        layout.caption = caption
        let message = MSMessage()
        message.url = components.url
        message.layout = layout
        activeConversation?.insert(message, completionHandler: nil)        
    }
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    private func presentViewController(for conversation: MSConversation, with: MSMessagesAppPresentationStyle) {
        var controller : UIViewController!
        
        if presentationStyle == .compact {
            controller = instantiateAddMessageViewController()
        }
        else{
            controller = instantiateMessageDetailsViewController()
        }
        
        addChildViewController(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        
        controller.didMove(toParentViewController: self)
        
    }
    
    private func instantiateMessageDetailsViewController() -> UIViewController {
        guard let controller = self.storyboard?.instantiateViewController(withIdentifier: "MessageDetailsViewController") as? MessageDetailsViewController
            else {
                fatalError("MessageDetailsViewController not found")
        }
        controller.delegate = self
        return controller
    }
    
    private func instantiateAddMessageViewController() -> UIViewController {
        guard let controller = self.storyboard?.instantiateViewController(withIdentifier: "AddMessageViewController") as? AddMessageViewController
            else {
                fatalError("AddMessageViewController not found")
        }
        controller.delegate = self
        return controller
    }
    
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        presentViewController(for: conversation, with: presentationStyle)
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
    
}
